/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.mpac.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Instrument;
import hr.algebra.model.Mission;
import hr.algebra.model.PhotoJournal;
import hr.algebra.model.Spacecraft;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.MessageUtils;
import hr.mpac.parser.rss.JournalJaxbParser;
import hr.mpac.parser.rss.JournalParser;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Function;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author majap
 */
public class AdminPanel extends javax.swing.JPanel {
private DefaultListModel<PhotoJournal> photoJournalsModel;
    private Repository repository;
   private List<PhotoJournal> photoJournals = new ArrayList<>();
   
   private Set<Mission> missions = new TreeSet<>();
     private Set<Instrument> instruments = new TreeSet<>();
      private Set<Spacecraft> spacecrafts = new TreeSet<>();
    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsPhotoJournals = new javax.swing.JList<>();
        btnDeleteAll = new javax.swing.JButton();
        btnAddRSS = new javax.swing.JButton();

        jScrollPane1.setViewportView(lsPhotoJournals);

        btnDeleteAll.setText("Delete all");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnAddRSS.setText("Upload data from web");
        btnAddRSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRSSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(btnAddRSS, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteAll)
                    .addComponent(btnAddRSS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddRSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRSSActionPerformed
        try {
           
            
            createMissions();
            createInstruments();
            createSpacecrafts();
           
            repository.createJournals(photoJournals);
           MessageUtils.showErrorMessage
        ("Success", "Data sucessfully added");
            
        } catch (Exception ex) {
            MessageUtils.showErrorMessage
        ("Unrecoverable error", "Unable to upload journals");
        }
    }//GEN-LAST:event_btnAddRSSActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
       try {
           
           boolean success = repository.deleteAll();
           FileUtils.deleteAllFilesInDirectory("assets");
           if(success) {
                MessageUtils.showErrorMessage
        ("Success", "data deleted");
           }
           clearList();
           initModel();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage
        ("Unrecoverable error", "Unable to delete data");
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRSS;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<PhotoJournal> lsPhotoJournals;
    // End of variables declaration//GEN-END:variables

    private void init() {
       try {
          
            repository = RepositoryFactory.getRepository();
            photoJournalsModel = new DefaultListModel<>();
            initModel(); 
            
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName())
                    .log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage
        ("Unrecoverable error", "Cannot initiate the form");
            
        }
        
    }

    private void loadModel() throws Exception {
         try {
          
            
               photoJournals = JournalJaxbParser.parse();
             photoJournalsModel.clear();
        
        photoJournals.forEach(photoJournalsModel::addElement);
        lsPhotoJournals.setModel(photoJournalsModel);
        btnAddRSS.setVisible(true);
        } catch (Exception ex) {
          Logger.getLogger(AdminPanel.class.getName())
                    .log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage
        ("Unrecoverable error", "Cannot load the list" + ex.getMessage());
        }
    }

    private void createMissions() {
       transferToSet(photoJournals, 
                  missions, 
                  p -> p.getMissionName() != null ? new Mission(p.getMissionName()) : null);
        try {
                       
            repository.createMissions(missions);
            
        } catch (Exception e) {
             MessageUtils.showErrorMessage
        ("Unrecoverable error", "Unable to create missions" + e.getMessage());
        }
    }

    private void createInstruments() {
        transferToSet(photoJournals, 
                  instruments, 
                  p -> p.getInstrumentName()!= null ? new Instrument(p.getInstrumentName()) : null);
        try {
            
            repository.createInstruments(instruments);
            
        } catch (Exception e) {
             MessageUtils.showErrorMessage
        ("Unrecoverable error", "Unable to create instruments");
        }
        
    }
    private <T, U> void transferToSet(Collection<T> sourceCollection, 
                                  Set<U> targetSet, 
                                  Function<T, U> converter) {
    sourceCollection.forEach(item -> {
        U entity = converter.apply(item);
        if (entity != null) {
            targetSet.add(entity);
        }
    });
}

    private void createSpacecrafts() {
          transferToSet(photoJournals, 
                  spacecrafts, 
                  p -> p.getSpacecraftName() != null ? new Spacecraft(p.getSpacecraftName()) : null);
        try {
                       
            repository.createSpacecrafts(spacecrafts);
            
        } catch (Exception e) {
             MessageUtils.showErrorMessage
        ("Unrecoverable error", "Unable to create spacecrafts" );
        }
    }

    private void initModel() {
        btnAddRSS.setVisible(false);
         new Thread(() -> {
            try {
                
                loadModel();
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName())
                        .log(Level.SEVERE, null, ex);
                 MessageUtils.showErrorMessage
        ("Unrecoverable error", "Problem with loading rss");
            }
        }).start();
    }

    private void clearList() {
          photoJournalsModel.clear();
        lsPhotoJournals.setModel(photoJournalsModel);
    }


   

  
}

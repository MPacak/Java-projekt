/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.mpac.view;


import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Instrument;
import hr.algebra.model.PhotoJournal;
import hr.algebra.model.Spacecraft;
import hr.algebra.utilities.MessageUtils;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.text.JTextComponent;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.zinternaltools.DateTimeChangeEvent;
import hr.algebra.model.CategoryType;
import hr.algebra.model.Mission;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.mpac.view.model.PhotoJournalTableModel;
import java.awt.FlowLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;


/**
 *
 * @author majap
 */
public class AddJournalPanel extends javax.swing.JPanel {
private Set<Instrument> instruments;
private  Set<Spacecraft> spacecrafts;
   private List<JTextComponent> validationFields;
   private List<JComboBox> comboBoxFields;
    private List<JLabel> errorLabels;
 private Repository repository;
   private DateTimePicker  dateTimePicker;
   private List<PhotoJournal> photoJournals = new ArrayList<>();
   private PhotoJournalTableModel model;
   Optional<PhotoJournal> photoJournal;
  private int selectedId; 
  
  private Set<Mission> missions = new TreeSet<>();
  private final DefaultListModel<Mission> missionsModel = new DefaultListModel<>();
   
  
    public AddJournalPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCategory = new javax.swing.ButtonGroup();
        bgFilter = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsMissions = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPhotoJournals = new javax.swing.JTable();
        tfTitle = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tfDescription = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfMission = new javax.swing.JTextField();
        btnAddPicture = new javax.swing.JButton();
        lbPicture = new javax.swing.JLabel();
        tfPath = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfCredit = new javax.swing.JTextField();
        cbInstrument = new javax.swing.JComboBox<>();
        cbSpacecraft = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lbErrorTitle = new javax.swing.JLabel();
        lbErrorDescription = new javax.swing.JLabel();
        lbErrorCredit = new javax.swing.JLabel();
        lbErrorPath = new javax.swing.JLabel();
        lbErrorCategory = new javax.swing.JLabel();
        btnUpdateJournal = new javax.swing.JButton();
        tfTarget = new javax.swing.JTextField();
        lbErrorTarget = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnAddJournal = new javax.swing.JButton();
        plDate = new javax.swing.JPanel();
        rbSun = new javax.swing.JRadioButton();
        rbUniverse = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        rbTitle = new javax.swing.JCheckBox();
        rbMission = new javax.swing.JCheckBox();
        rbSpacecraft = new javax.swing.JCheckBox();
        rbInstrument = new javax.swing.JCheckBox();
        rbTarget = new javax.swing.JCheckBox();
        tfFilter = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 571));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("All missions");

        jScrollPane1.setViewportView(lsMissions);

        tbPhotoJournals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbPhotoJournals.setPreferredSize(new java.awt.Dimension(300, 650));
        tbPhotoJournals.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPhotoJournalsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbPhotoJournals);

        tfTitle.setMaximumSize(new java.awt.Dimension(235, 22));

        tfDescription.setColumns(20);
        tfDescription.setRows(5);
        tfDescription.setMaximumSize(new java.awt.Dimension(230, 84));
        tfDescription.setName(""); // NOI18N
        jScrollPane3.setViewportView(tfDescription);

        jLabel2.setText("Title");

        jLabel3.setText("Description");

        jLabel4.setText("Category");

        jLabel5.setText("Mission");

        tfMission.setMaximumSize(new java.awt.Dimension(323, 22));

        btnAddPicture.setText("Add picture");
        btnAddPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPictureActionPerformed(evt);
            }
        });

        lbPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.jpeg"))); // NOI18N
        lbPicture.setText("jLabel6");

        tfPath.setEditable(false);

        jLabel7.setText("Credit");

        tfCredit.setMaximumSize(new java.awt.Dimension(64, 22));

        cbInstrument.setMaximumSize(new java.awt.Dimension(323, 22));

        cbSpacecraft.setMaximumSize(new java.awt.Dimension(323, 22));

        jLabel8.setText("Choose instrument");

        jLabel9.setText("Choose spacecraft");

        lbErrorTitle.setForeground(new java.awt.Color(255, 0, 0));
        lbErrorTitle.setText("X");

        lbErrorDescription.setForeground(new java.awt.Color(255, 0, 0));
        lbErrorDescription.setText("X");

        lbErrorCredit.setForeground(new java.awt.Color(255, 0, 0));
        lbErrorCredit.setText("X");

        lbErrorPath.setForeground(new java.awt.Color(255, 0, 0));
        lbErrorPath.setText("X");

        lbErrorCategory.setForeground(new java.awt.Color(255, 0, 0));
        lbErrorCategory.setText("X");

        btnUpdateJournal.setText("Update");
        btnUpdateJournal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateJournalActionPerformed(evt);
            }
        });

        tfTarget.setMaximumSize(new java.awt.Dimension(64, 22));

        lbErrorTarget.setForeground(new java.awt.Color(255, 0, 0));
        lbErrorTarget.setText("X");

        jLabel10.setText("Target");

        btnAddJournal.setText("Add");
        btnAddJournal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddJournalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plDateLayout = new javax.swing.GroupLayout(plDate);
        plDate.setLayout(plDateLayout);
        plDateLayout.setHorizontalGroup(
            plDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        plDateLayout.setVerticalGroup(
            plDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        bgCategory.add(rbSun);
        rbSun.setText("Sun");
        rbSun.setActionCommand("SUN");

        bgCategory.add(rbUniverse);
        rbUniverse.setText("Universe");
        rbUniverse.setActionCommand("UNIVERSE");

        jLabel6.setText("filter by: ");

        bgFilter.add(rbTitle);
        rbTitle.setText("Title");
        rbTitle.setActionCommand("TITLE");

        bgFilter.add(rbMission);
        rbMission.setText("Mission");
        rbMission.setActionCommand("MISSION");

        bgFilter.add(rbSpacecraft);
        rbSpacecraft.setText("Spacecraft");
        rbSpacecraft.setActionCommand("SPACECRAFT");

        bgFilter.add(rbInstrument);
        rbInstrument.setText("Instrument");
        rbInstrument.setActionCommand("INSTRUMENT");

        bgFilter.add(rbTarget);
        rbTarget.setText("Target");
        rbTarget.setActionCommand("TARGET");

        tfFilter.setActionCommand("<Not Set>");
        tfFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfFilterKeyReleased(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbErrorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbErrorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(133, 133, 133)
                                .addComponent(tfPath, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbErrorPath, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(225, 225, 225)
                                        .addComponent(lbErrorCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbErrorTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(27, 27, 27)
                                .addComponent(plDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddPicture)
                                    .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(tfCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rbSun)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rbUniverse)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbErrorCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfMission, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbSpacecraft, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbInstrument, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddJournal, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(244, 244, 244)
                                .addComponent(btnUpdateJournal, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(116, 116, 116)
                                    .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnReset))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rbTitle)
                                    .addGap(36, 36, 36)
                                    .addComponent(rbMission)
                                    .addGap(38, 38, 38)
                                    .addComponent(rbSpacecraft)
                                    .addGap(27, 27, 27)
                                    .addComponent(rbInstrument)
                                    .addGap(18, 18, 18)
                                    .addComponent(rbTarget))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfMission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbInstrument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(jLabel9)
                                .addGap(1, 1, 1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddPicture))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(6, 6, 6)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbErrorTitle))
                                    .addGap(13, 13, 13)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lbErrorDescription)
                                            .addGap(43, 43, 43))))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(tfPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbErrorPath))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbErrorCredit))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbErrorTarget)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cbSpacecraft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rbSun)
                                        .addComponent(rbUniverse)
                                        .addComponent(lbErrorCategory))
                                    .addComponent(plDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateJournal)
                            .addComponent(btnDelete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnAddJournal)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(rbTitle)
                    .addComponent(rbMission)
                    .addComponent(rbSpacecraft)
                    .addComponent(rbInstrument)
                    .addComponent(rbTarget))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateJournalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateJournalActionPerformed
         if (selectedId == 0) {
            return; 
        }
        if (!formValid()) {
            return;
        }
        LocalDateTime selectedDateTime = dateTimePicker.getDateTimeStrict();
         try {
              PhotoJournal photoJournal = new PhotoJournal (
                      
            tfTitle.getText(),
           CategoryType.valueOf(bgCategory.getSelection().getActionCommand()),
            tfDescription.getText(),
            tfCredit.getText(),
            tfPath.getText(),
            tfMission.getText(),
            cbInstrument.getSelectedIndex() == 0 ? null
            : cbInstrument.getSelectedItem().toString(),
            cbSpacecraft.getSelectedIndex() == 0 ? null
            : cbSpacecraft.getSelectedItem().toString(),
            tfTarget.getText(),
            selectedDateTime
             );   
            repository.updateJournal(selectedId, photoJournal);       
           model.Distinctive(repository.selectJournals());
             clearForm();
        } catch (Exception ex) {
               Logger.getLogger(AddJournalPanel.class.getName())
               .log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage
        ("Error", "Unable to update journal");
        }
           
    }//GEN-LAST:event_btnUpdateJournalActionPerformed

    private void btnAddJournalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddJournalActionPerformed
        if (selectedId != 0) {
            return; 
        }
        if (!formValid()) {
            return;
        }
        LocalDateTime selectedDateTime = dateTimePicker.getDateTimeStrict();
       
          try {
            PhotoJournal photoJournal = new PhotoJournal (
            tfTitle.getText().trim(),
           CategoryType.valueOf(bgCategory.getSelection().getActionCommand()),
            tfDescription.getText(),
            tfCredit.getText(),
            tfPath.getText(),
            tfMission.getText(),
            cbInstrument.getSelectedIndex() == 0 ? null
            : cbInstrument.getSelectedItem().toString(),
            cbSpacecraft.getSelectedIndex() == 0 ? null
            : cbSpacecraft.getSelectedItem().toString(),
            tfTarget.getText(),
            selectedDateTime
             );
             int newJournalId = repository.createJournal(photoJournal);
             clearForm(); 
            
            model.Distinctive(repository.selectJournals());
        } catch (Exception ex) {
             Logger.getLogger(AddJournalPanel.class.getName())
                     .log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to add journal");
        }
    }//GEN-LAST:event_btnAddJournalActionPerformed

    private void btnAddPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPictureActionPerformed
       Optional<File> file = FileUtils.uploadFile(
                "Images",
                "png", "jpg", "jpeg");
        if (file == null) {
            return;
        }
         file.ifPresent(f -> {
        tfPath.setText(f.getAbsolutePath());
        setIcon(lbPicture, f);
    });
    
    }//GEN-LAST:event_btnAddPictureActionPerformed

    private void tbPhotoJournalsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPhotoJournalsMouseClicked
        int selectedRow = tbPhotoJournals.getSelectedRow();
        
        int rowIndex = tbPhotoJournals.convertRowIndexToModel
        (selectedRow);
        
        selectedId = (int) model.getValueAt(rowIndex, 0);
        try {
            photoJournal = repository.selectJournal(selectedId);
           
           photoJournal.ifPresent(p -> {
               fillForm(p);
               
           }); 
      

        } catch (Exception e) {
            Logger.getLogger(AddJournalPanel.class.getName())
                    .log(Level.SEVERE, null, e);

        }
    }//GEN-LAST:event_tbPhotoJournalsMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
          setComboBox();
          setMissionList();
          
             new Thread(() -> {
            try {
                
                 initTable();
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName())
                        .log(Level.SEVERE, null, ex);
                 MessageUtils.showErrorMessage
        ("Unrecoverable error", "Problem with loading table");
            }
        }).start();
           
    }//GEN-LAST:event_formComponentShown

    private void tfFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loadFilteredModel();
   }
    }//GEN-LAST:event_tfFilterKeyReleased

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
       bgFilter.clearSelection();
        try {
             initTable();
        } catch (Exception e) {
             Logger.getLogger(AddJournalPanel.class.getName())
                .log(Level.SEVERE, null, e);
        MessageUtils.showErrorMessage("Error", 
                "Unable to fill the table");
        }
      
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
         if (selectedId == 0) {
            return; 
        }
        if (!formValid()) {
            return;
        }
     
        try {
                 photoJournal.ifPresent(p -> {
               FileUtils.deleteFile(p.getPictureLink());
           }); 
            repository.deleteJournal(selectedId);
            model.setPhotoJournals(repository.selectJournals());
            clearForm();
        } catch (Exception e) {
            Logger.getLogger(AddJournalPanel.class.getName())
                    .log(Level.SEVERE, null, e);
            MessageUtils.showErrorMessage
        ("Error", "Unable to delete journal");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCategory;
    private javax.swing.ButtonGroup bgFilter;
    private javax.swing.JButton btnAddJournal;
    private javax.swing.JButton btnAddPicture;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdateJournal;
    private javax.swing.JComboBox<String> cbInstrument;
    private javax.swing.JComboBox<String> cbSpacecraft;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbErrorCategory;
    private javax.swing.JLabel lbErrorCredit;
    private javax.swing.JLabel lbErrorDescription;
    private javax.swing.JLabel lbErrorPath;
    private javax.swing.JLabel lbErrorTarget;
    private javax.swing.JLabel lbErrorTitle;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JList<Mission> lsMissions;
    private javax.swing.JPanel plDate;
    private javax.swing.JCheckBox rbInstrument;
    private javax.swing.JCheckBox rbMission;
    private javax.swing.JCheckBox rbSpacecraft;
    private javax.swing.JRadioButton rbSun;
    private javax.swing.JCheckBox rbTarget;
    private javax.swing.JCheckBox rbTitle;
    private javax.swing.JRadioButton rbUniverse;
    private javax.swing.JTable tbPhotoJournals;
    private javax.swing.JTextField tfCredit;
    private javax.swing.JTextArea tfDescription;
    private javax.swing.JTextField tfFilter;
    private javax.swing.JTextField tfMission;
    private javax.swing.JTextField tfPath;
    private javax.swing.JTextField tfTarget;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void setComboBox() {
        try {
             instruments = repository.selectInstruments();
              spacecrafts = repository.selectSpacecrafts();
            
        } catch (Exception e) {
             MessageUtils.showErrorMessage("Error",
            "Cannot get entity");
        }
        cbInstrument.removeAllItems();
        cbInstrument.addItem("(choose)");
        instruments.forEach(instrument 
               -> cbInstrument.addItem(instrument.getInstrumentName()));
     
        cbSpacecraft.removeAllItems();
        cbSpacecraft.addItem("(choose)");
        spacecrafts.forEach(spacecraft 
               -> cbSpacecraft.addItem(spacecraft.getSpacecraftName()));
    }

    private void init() {
       initValidation();
            hideErrors();
            initRepository();
            initDatePicker();
         initDragNDrop();
          
    }
    
    private void initRepository() {
       repository = RepositoryFactory.getRepository();
    }

    private void initValidation() {
   
      
        validationFields = Arrays.asList
        (tfTitle, tfDescription,tfCredit, tfPath,tfTarget);
        errorLabels = Arrays.asList
        (lbErrorTitle, lbErrorDescription, lbErrorCredit, 
                lbErrorPath, lbErrorTarget);
        comboBoxFields = Arrays.asList(cbInstrument,cbSpacecraft);
    }

  private void hideErrors() {
         errorLabels.forEach(e -> e.setVisible(false));
          lbErrorCategory.setVisible(false);
    }
   
       private boolean formValid() {
          hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
 
        }
        ok &= bgCategory.getSelection() != null;
        lbErrorCategory.setVisible(bgCategory.getSelection() == null);
        return ok;
    }

    private void initDatePicker() {
 plDate.removeAll();
    plDate.setLayout(new FlowLayout());

     dateTimePicker = new DateTimePicker();

        dateTimePicker.addDateTimeChangeListener((DateTimeChangeEvent event) -> {
           
 });


        plDate.add(new JLabel("DateTime Picker:"));
        plDate.add(dateTimePicker);

    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(f -> f.setText(""));
        comboBoxFields.forEach(cb -> cb.setSelectedIndex(0));
        bgCategory.clearSelection();
        tfMission.setText("");
        dateTimePicker.clear();
       
        selectedId = 0;
        lbPicture.setIcon(new javax.swing.ImageIcon
        (getClass().getResource("/assets/no_image.jpeg"))); 

    }

    private void setIcon(JLabel label, File file) {
          try {
            label.setIcon(
                    IconUtils.createIcon(
                            file,
                            label.getWidth(),
                            label.getHeight())
            );
        } catch (IOException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to upload");
            Logger.getLogger(AddJournalPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initTable() throws Exception {
      tbPhotoJournals.setRowHeight(25);

        tbPhotoJournals.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbPhotoJournals.setAutoCreateRowSorter(true);

    try {
        model = new PhotoJournalTableModel(repository.selectJournals()
        .stream()
        .distinct()
        .toList());
        photoJournals = repository.selectJournals();
    } catch (Exception ex) {
        Logger.getLogger(AddJournalPanel.class.getName())
                .log(Level.SEVERE, null, ex);
        MessageUtils.showErrorMessage("Error", 
                "Unable to fill the table");
    }
        tbPhotoJournals.setModel(model);
    }

    private void fillForm(PhotoJournal p) {
        tfTitle.setText(p.getTitle());
        tfDescription.setText(p.getDescriptionText());
        tfCredit.setText(p.getCredits());
        tfTarget.setText(p.getTarget());
        tfPath.setText(p.getPictureLink());
        tfMission.setText(p.getMissionName());
       cbInstrument.setSelectedItem(p.getInstrumentName() == null ? "(choose)" : p.getInstrumentName());
        cbSpacecraft.setSelectedItem(p.getSpacecraftName() == null ? "(choose)" : p.getSpacecraftName());
        rbSun.setSelected(p.getCategory() == CategoryType.SUN);
        rbUniverse.setSelected(p.getCategory() != CategoryType.SUN);
          dateTimePicker.setDateTimeStrict(p.getPublishedDate());
        tfPath.setText(p.getPictureLink());

        setIcon(lbPicture, new File(p.getPictureLink()));

    
    }

    private void setMissionList() {
        missionsModel.clear();
           try {
            missions = repository.selectMissions();
            missions.forEach(missionsModel::addElement);
            lsMissions.setModel(missionsModel);
           
        } catch (Exception e) {
            Logger.getLogger(AddJournalPanel.class.getName())
                .log(Level.SEVERE, null, e);
        MessageUtils.showErrorMessage("Error", 
                "Unable to set mission list");
        }
    }
    private void loadFilteredModel() {
      //  model.clear();
       List<PhotoJournal> filteredPhotoJournals = photoJournals
                .stream()
                .filter(p -> {
                    String filter = tfFilter.getText().trim().toLowerCase();
                    boolean test = true;
                    switch (bgFilter.getSelection().getActionCommand()) {
                case "TITLE" -> test &= p.getTitle().toLowerCase().contains(filter);
                       case "MISSION" -> test &= p.getMissionName() != null ?
                            p.getMissionName().toLowerCase().contains(filter) : false;
                       case "SPACECRAFT" -> test &= p.getSpacecraftName() != null ?
                            p.getSpacecraftName().toLowerCase().contains(filter):false;
                       case "INSTRUMENT" -> test &= p.getInstrumentName() != null ?
                            p.getInstrumentName().toLowerCase().contains(filter):false;
                      case "TARGET" -> test &= p.getTarget() != null ?
                            p.getTarget().toLowerCase().contains(filter):false;
                default -> throw new AssertionError();
            }
                    return test;
                })
                .collect(Collectors.toList());
        tfFilter.setText("");
      
        model.Distinctive(filteredPhotoJournals);
        tbPhotoJournals.setModel(model);

    }

      private void initDragNDrop() {
    lsMissions.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    lsMissions.setDragEnabled(true);
    lsMissions.setTransferHandler(new ExportTransferHandler());
    
    tfMission.setDropMode(DropMode.USE_SELECTION);
   tfMission.setTransferHandler(new ImportTransferHandler());
    }
   
    private class ExportTransferHandler extends TransferHandler {
    
    @Override
    public int getSourceActions(JComponent c) {

    return COPY;
    }
    
    @Override
    public Transferable createTransferable(JComponent c) {
    return new StringSelection(lsMissions.getSelectedValue().getMissionName());
    }
    }
    
    private class ImportTransferHandler extends TransferHandler {
 
    @Override
    public boolean canImport(TransferHandler.TransferSupport support) {
    return support.isDataFlavorSupported(DataFlavor.stringFlavor);
    }

    @Override
    public boolean importData(TransferHandler.TransferSupport support) {
    Transferable transferable = support.getTransferable();
    try {
    String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);
    
    if (!data.equals(tfMission.getText())) {
    tfMission.setText(data);
    return true;
    }
    
    } catch (UnsupportedFlavorException | IOException ex) {
    Logger.getLogger(AddJournalPanel.class.getName()).log(Level.SEVERE, null, ex);
    }
    return false;
    }
    }
}
